buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = 'gradle plugins'
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'gradle.plugin.se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.55'
    }
}

plugins {
	id 'com.matthewprenger.cursegradle' version '1.2.0'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'

// External properties
ext.configFile = file 'build.properties'
configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

group = 'com.github.lunatrius'
version = "${config.minecraft_version}-${config.mod_version}"
archivesBaseName = "${config.mod_name}"
def modid = "${config.modid}"

minecraft {
    version = config.minecraft_version + '-' + config.forge_version
    mappings = config.mappings
    runDir = 'run'
    replace '@MOD_NAME@', archivesBaseName
    replace '@MODID@', modid
    replace '@MOD_VERSION@', config.mod_version
    replace '@FORGE_VERSION@', config.forge_version
    replace '@TTL_VERSION@', config.ttl_version
	if (project.hasProperty('keyFingerprint')) {
		replace '@FINGERPRINT@', project.keyFingerprint
	}
    else {
		replace '@FINGERPRINT@', ''
    }
    replaceIn 'reference/Reference.java'
    useDepAts = true
}


repositories {
    ivy {
        name = 'lunatrius\' ivy repo'
        url 'http://mc.lunatri.us/files'
    }
}

dependencies {
    deobfCompile group: group, name: 'LunatriusCore', version: "${config.minecraft_version}-${config.version_lunatriuscore}", classifier: 'universal'
}

def commonManifest = {
    attributes 'FMLAT': config.extra_fmlat
}

jar {
    manifest commonManifest
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }

    keyStore = project.keyStore // This needs to be a path to the keystore file
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar
