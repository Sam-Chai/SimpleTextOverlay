buildscript {
    repositories {
        maven {
            name = 'gradle plugins'
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            name = 'forge'
            url = 'https://files.minecraftforge.net/maven'
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
        classpath 'se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.71.8'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'
apply plugin: 'com.matthewprenger.cursegradle'

repositories {
    mavenLocal()
    /*
    maven {
        url = 'https://maven.theillusivec4.top/'
    }
    */
}

group = 'com.github.wendall911.simpletextoverlay'
version = "${minecraft_version}-${mod_version}"
archivesBaseName = "${mod_name}"
def modid = "${modid}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '17'

minecraft {
    mappings channel: "${mappings_channel}", version: mappings_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file("run").canonicalPath

            mods {
                simpletextoverlay {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file("run").canonicalPath

            mods {
                simpletextoverlay {
                    source sourceSets.main
                }
            }
        }
    }    
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    //compileOnly fg.deobf("com.github.glitchfiend.biomesoplenty:SereneSeasons:${minecraft_version}-${serene_seasons_version}:api")
    //compileOnly fg.deobf("top.theillusivec4.curios:curios:FORGE-${minecraft_version}-${curios_version}:api")
}

jar {
    manifest {
        attributes([
            "Specification-Title": mod_name,
            "Specification-Vendor": "${mod_author}",
            "Specification-Version": "${version}",
            "Implementation-Title": "${mod_name}",
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"${mod_author}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:deprecation', '-Xlint:unchecked']
}

curseforge {
    if (project.hasProperty('curseApiKey')) {
        apiKey = project.stocurseApiKey
        project {
            id = project.stocurseId
            changelog = file('build/libs/' + project.getName() + '-' + version + '-changelog.txt')
            releaseType = cf_release_type
            addGameVersion(minecraft_version)
            mainArtifact(jar) {
                relations {
                    optionalLibrary 'serene-seasons'
                    optionalLibrary 'curios'
                    optionalLibrary 'backpacked'
                }
            }
        }
    }
}

tasks.curseforge.dependsOn build

task changelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
	file = new File('build/libs/' + project.getName() + '-' + version + '-changelog.txt');
    templateContent = file('files/templates/changelog.mustache').getText('UTF-8');
    fromRepo = file("$projectDir");
	toRef = "${mod_version}";
	fromRef = "${last_mod_version}";
}

tasks.build.dependsOn('changelog')

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    from (sourceSets.main.output) {
        include 'LICENSE'
    }

    classifier = 'src'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

/*
processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // replaces
        expand ([
            'modid': modid,
            'mod_version': version,
            'mod_author': mod_author
        ])
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}
*/
